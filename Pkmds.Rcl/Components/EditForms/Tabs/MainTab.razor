@if (AppState.SaveFile?.Context is EntityContext saveFileEntityContext &&
saveFileEntityContext is not
EntityContext.None or
EntityContext.SplitInvalid or
EntityContext.MaxInvalid &&
AppState.SelectedPokemon is not null)
{
    <MudNumericField Label="PID"
                     Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.PID"
    @bind-Value:after="@(() => { AppState.LoadPokemonStats(); AppState.Refresh(); })"
                     For="@(() => AppState.SelectedPokemon.PID)" />

    <MudAutocomplete T="ComboItem"
                     Label="Species"
                     Variant="@Variant.Outlined"
    @bind-Value:get="@(AppState.GetSpeciesComboItem(AppState.SelectedPokemon.Species))"
    @bind-Value:set="@((species) => { AppState.SelectedPokemon.Species = (ushort)species.Value; AppState.LoadPokemonStats(); AppState.Refresh(); })"
                     SearchFunc="@((searchString) => Task.FromResult(AppState.SearchPokemonNames(searchString)))"
                     ToStringFunc="@((species) => species.Text)" />

    <MudCheckBox Label="Is Nicknamed"
    @bind-Checked="@AppState.SelectedPokemon.IsNicknamed"
                 For="@(() => AppState.SelectedPokemon.IsNicknamed)" />

    <MudTextField Label="Nickname"
                  Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.Nickname"
                  For="@(() => AppState.SelectedPokemon.Nickname)" />

    <MudNumericField Label="EXP"
                     Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.EXP"
    @bind-Value:after="@(AppState.LoadPokemonStats)"
                     For="@(() => AppState.SelectedPokemon.EXP)" />

    <MudNumericField Label="Level"
                     Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.CurrentLevel"
    @bind-Value:after="@(AppState.LoadPokemonStats)"
                     For="@(() => AppState.SelectedPokemon.CurrentLevel)" />

    <MudSelect Label="Nature"
               Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.Nature"
    @bind-Value:after="@(AppState.LoadPokemonStats)"
               For="@(() => AppState.SelectedPokemon.Nature)">
        @foreach (var nature in GameInfo.FilteredSources.Natures)
        {
            <MudSelectItem Value="@(nature.Value)">
                <MudStack>
                    <MudText>
                        @nature.Text
                    </MudText>
                    @{
                    var str = AppState.GetStatModifierString(nature.Value);
                }
                @if (str is { Length: > 0 })
                {
                    <MudText>
                        @str
                    </MudText>
                }
            </MudStack>
        </MudSelectItem>
        }
    </MudSelect>

    @if (AppState.SelectedPokemon is { PersonalInfo.HasForms: true } || AppState.SelectedPokemon is { Species: (ushort)Species.Unown })
    {
        var forms = FormConverter.GetFormList(AppState.SelectedPokemon.Species, GameInfo.Strings.types, GameInfo.Strings.forms, GameInfo.GenderSymbolUnicode, AppState.SelectedPokemon.Context);
        if (forms.AsEnumerable().Any(f => !string.IsNullOrEmpty(f)))
        {
            <MudSelect T="byte"
            @ref="@FormSelect"
                       Label="Forme"
                       Variant="@Variant.Outlined"
            @bind-Value="@AppState.SelectedPokemon.Form"
            @bind-Value:after="@(() => { AppState.LoadPokemonStats(); AppState.Refresh(); })"
                       For="@(() => AppState.SelectedPokemon.Form)">
                @for (byte i = 0; i < forms.Length; i++)
                {
                    var formId = i;
                    <MudSelectItem Value="@formId">
                        @forms[formId]
                    </MudSelectItem>
                }
            </MudSelect>

            @if (AppState.SelectedPokemon is IFormArgument f && FormArgumentUtil.GetFormArgumentMax(AppState.SelectedPokemon.Species, AppState.SelectedPokemon.Form, AppState.SelectedPokemon.Generation) > 0 && FormConverter.GetFormArgumentIsNamedIndex(AppState.SelectedPokemon.Species))
            {
                <MudSelect T="uint?"
                           Label="Forme Arg"
                           Variant="@Variant.Outlined"
                @bind-Value:get="@(AppState.SelectedPokemon.GetFormArgument())"
                @bind-Value:set="@((formArg) => { AppState.SelectedPokemon.ChangeFormArgument(formArg ?? 0); AppState.LoadPokemonStats(); AppState.Refresh(); })">
                    @{
                        var formArgs = FormConverter.GetFormArgumentStrings(AppState.SelectedPokemon.Species);
                    }
                    @for (uint? i = 0; i < formArgs.Length; i++)
                    {
                        var formArg = i;
                        <MudSelectItem Value="@(formArg)">
                            @formArgs[formArg ?? 0]
                        </MudSelectItem>
                    }
                </MudSelect>
            }
        }
    }

    <MudAutocomplete T="ComboItem"
                     Label="Held Item"
                     Variant="@Variant.Outlined"
    @bind-Value:get="@(AppState.GetItemComboItem(AppState.SelectedPokemon.HeldItem))"
    @bind-Value:set="@((item) => { AppState.SelectedPokemon.HeldItem = item.Value; AppState.LoadPokemonStats(); AppState.Refresh(); })"
                     SearchFunc="@((searchString) => Task.FromResult(AppState.SearchItemNames(searchString)))"
                     ToStringFunc="@((item) => item.Text)">
        <ItemTemplate Context="item">
            <MudStack Row="@true">
                @if (item.Value != 0)
                {
                    var pkm = AppState.SelectedPokemon.Clone();
                    pkm.HeldItem = item.Value;
                    <MudImage Src="@SpriteHelper.GetBigItemSpriteFilename(pkm.SpriteItem)"
                              ObjectFit="@ObjectFit.Contain"
                              ObjectPosition="@ObjectPosition.Center"
                              Width="22"
                              Height="22" />
                }
                <MudText>
                    @item.Text
                </MudText>
            </MudStack>
        </ItemTemplate>
    </MudAutocomplete>

    <MudAutocomplete T="ComboItem"
                     Label="Ability"
                     Variant="@Variant.Outlined"
    @bind-Value:get="@(AppState.GetAbilityComboItem(AppState.SelectedPokemon.Ability))"
    @bind-Value:set="@((ability) => AppState.SelectedPokemon.Ability = ability.Value)"
                     SearchFunc="@((searchString) => Task.FromResult(AppState.SearchAbilityNames(searchString)))"
                     ToStringFunc="@((ability) => ability.Text)" />

    <MudSelect Label="Language"
               Variant="@Variant.Outlined"
    @bind-Value="@AppState.SelectedPokemon.Language"
               For="@(() => AppState.SelectedPokemon.Language)">
        @foreach (var language in GameInfo.FilteredSources.Languages)
        {
            <MudSelectItem Value="language.Value">
                @language.Text
            </MudSelectItem>
        }
    </MudSelect>

    <MudNumericField Label="Friendship"
                     Variant="@Variant.Outlined"
                     Min="0"
                     Max="255"
    @bind-Value="@AppState.SelectedPokemon.CurrentFriendship"
                     For="@(() => AppState.SelectedPokemon.CurrentFriendship)" />

    <MudCheckBox Label="Is Egg"
    @bind-Checked="@AppState.SelectedPokemon.IsEgg"
    @bind-Checked:after="@AppState.Refresh"
                 For="@(() => AppState.SelectedPokemon.IsEgg)" />

    <MudCheckBox Label="Infected"
    @bind-Checked="@AppState.SelectedPokemon.PKRS_Infected"
    @bind-Checked:after="@AppState.Refresh"
                 For="@(() => AppState.SelectedPokemon.PKRS_Infected)" />

    <MudCheckBox Label="Cured"
    @bind-Checked="@AppState.SelectedPokemon.PKRS_Cured"
    @bind-Checked:after="@AppState.Refresh"
                 For="@(() => AppState.SelectedPokemon.PKRS_Cured)" />
    @*
            <MudCheckBox Label="N's Sparkle"
            @bind-Checked="@AppState.SelectedPokemon"
            @bind-Checked:after="@AppState.Refresh"
            For="@(() => AppState.SelectedPokemon.PKRS_Cured)" />
            *@

    <MudCheckBox Label="Shiny"
                 Checked="@AppState.SelectedPokemon.IsShiny"
                 ReadOnly="@true"
                 For="@(() => AppState.SelectedPokemon.IsShiny)" />
}

@code {
    private MudSelect<byte>? FormSelect { get; set; }
}
