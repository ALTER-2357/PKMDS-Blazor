@using Pkmds.Rcl.Extensions
@inherits BasePkmdsComponent

@if (Pokemon is not null &&
     AppState.SaveFile is
     {
         Context: var saveFileEntityContext and not
         (EntityContext.None or
         EntityContext.SplitInvalid or
         EntityContext.MaxInvalid)
     } &&
     AppState.SelectedSlotsAreValid)
{
    <MudStack Spacing="1">

        <MudStack Spacing="1">
            <MudCheckBox @bind-Value="@UseTextSearch"
                         Label="Use text search"/>

            @for (var counter = 0; counter < Pokemon.Moves.Length; counter++)
            {
                var i = counter;
                var displayNumber = i + 1;
                var moveId = Pokemon.Moves[i];

                <MudGrid Spacing="1">
                    @if (UseTextSearch)
                    {
                        <MudItem xs="1"
                                 Class="@ColumnClass">
                            @if (moveId != 0)
                            {
                                @MoveTypeSummary(MoveInfo.GetType(moveId, saveFileEntityContext))
                            }
                            else
                            {
                                <span style="width: 30px"></span>
                            }
                        </MudItem>
                    }

                    <MudItem xs="@(UseTextSearch
                                     ? 5
                                     : 6)"
                             Class="@ColumnClass">
                        @if (UseTextSearch)
                        {
                            @* ReSharper disable once CSharpWarnings::CS8603 *@
                            <MudAutocomplete T="@ComboItem"
                                             Label="@($"Move {displayNumber}")"
                                             Variant="@Variant.Outlined"
                                             Margin="@Margin.Dense"
                                             Clearable
                                             @bind-Value:get="@(AppService.GetMoveComboItem(moveId))"
                                             @bind-Value:set="@(newMove => SetPokemonMove(i, newMove))"
                                             SearchFunc="@SearchMoves"
                                             ToStringFunc="@(move => move?.Text)">

                                <ItemTemplate Context="move">
                                    @MoveRenderFragment(move, saveFileEntityContext)
                                </ItemTemplate>

                            </MudAutocomplete>
                        }
                        else
                        {
                            <MudSelect T="@(int?)"
                                       Label="@($"Move {displayNumber}")"
                                       Variant="@Variant.Outlined"
                                       Margin="@Margin.Dense"
                                       Clearable
                                       @bind-Value:get="@(GetPokemonMove(i))"
                                       @bind-Value:set="@(newMove => SetPokemonMove(i, newMove))">
                                @* ReSharper disable once ConditionalAccessQualifierIsNonNullableAccordingToAPIContract *@
                                @foreach (var move in AppService.GetMoves())
                                {
                                    <MudSelectItem Value="@move?.Value">
                                        @MoveRenderFragment(move, saveFileEntityContext)
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>

                    <MudItem xs="2"
                             Class="@ColumnClass">
                        <MudNumericField Label="PP"
                                         T="@int"
                                         Variant="@Variant.Outlined"
                                         Min="0"
                                         Margin="@Margin.Dense"
                                         @bind-Value:get="@GetPokemonPP(i)"
                                         @bind-Value:set="@(newValue => SetPokemonPP(i, newValue))"/>

                    </MudItem>

                    <MudItem xs="2"
                             Class="@ColumnClass">
                        <MudNumericField Label="Ups"
                                         T="@int"
                                         Variant="@Variant.Outlined"
                                         Max="3"
                                         Min="0"
                                         Margin="@Margin.Dense"
                                         @bind-Value:get="@GetPokemonPPUps(i)"
                                         @bind-Value:set="@(newValue => SetPokemonPPUps(i, newValue))"/>
                    </MudItem>

                    <MudItem xs="2"
                             Class="@ColumnClass">
                        <MudNumericField Label="Max"
                                         T="@int"
                                         Variant="@Variant.Outlined"
                                         Value="@Pokemon.GetMaxPP(i)"
                                         ReadOnly
                                         Margin="@Margin.Dense"
                                         HideSpinButtons/>
                    </MudItem>
                </MudGrid>
            }
        </MudStack>

        @if (GameInfo.FilteredSources.Moves.Any(m => m.Value == (int)Move.HiddenPower) && Pokemon is not { Context: EntityContext.Gen8 or EntityContext.Gen9 })
        {
            <HiddenPowerChooser Pokemon="@Pokemon"/>
        }

    </MudStack>
}

@code {

    private RenderFragment MoveRenderFragment(ComboItem? move, EntityContext saveFileEntityContext)
    {
        if (move is null)
        {
            return @<span>(None)</span>;
        }

        return @<MudStack Row>
                   @if (move.Value != 0)
                   {
                       @MoveTypeSummary(MoveInfo.GetType((ushort)move.Value, saveFileEntityContext))
                   }
                   <MudText>
                       @move.Text
                   </MudText>
               </MudStack>;
    }

}
