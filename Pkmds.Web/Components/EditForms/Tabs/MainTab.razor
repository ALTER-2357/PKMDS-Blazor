@inherits BasePkmdsComponent

@if (Pokemon is not null &&
AppState.SaveFile is { Context: { } saveFileEntityContext, Generation: { } saveGeneration } saveFile &&
saveFileEntityContext is not
EntityContext.None or
EntityContext.SplitInvalid or
EntityContext.MaxInvalid &&
AppState.SelectedSlotsAreValid)
{
    @if (saveGeneration >= 3)
    {
        <MudNumericField Label="PID"
                         Variant="@Variant.Outlined"
                         @bind-Value="@Pokemon.PID"
                         @bind-Value:after="@(() => { AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                         For="@(() => Pokemon.PID)" />
    }

    <MudAutocomplete T="@ComboItem"
                     Label="Species"
                     Variant="@Variant.Outlined"
                     @bind-Value:get="@(AppService.GetSpeciesComboItem(Pokemon.Species))"
                     @bind-Value:set="@(species => { Pokemon.Species = (ushort)species.Value; AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                     SearchFunc="@SearchPokemonNames"
                     ToStringFunc="@(species => species?.Text)" />

    if (Pokemon != saveFile.BlankPKM && Pokemon.Species != (ushort)Species.None)
    {
        @TypeSummary(Pokemon.GetGenerationTypes())
    }

    <MudStack Row>

        <MudCheckBox Label="Is Nicknamed"
                     @bind-Value="@Pokemon.IsNicknamed"
                     For="@(() => Pokemon.IsNicknamed)" />

        <MudButton OnClick="@RevertNickname"
                   ButtonType="@ButtonType.Button"
                   Variant="@Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Note"
                   Color="@Color.Default"
                   Disabled="@(!Pokemon.IsNicknamed)">
            Revert Nickname
        </MudButton>

    </MudStack>

    <MudTextField Label="Nickname"
                  Variant="@Variant.Outlined"
                  @bind-Value="@Pokemon.Nickname"
                  For="@(() => Pokemon.Nickname)" />

    @if (saveGeneration >= 2)
    {
        <div style="height: 48px;"
             class="d-flex align-center">

            <MudStack Row
                      Spacing="1"
                      Class="@($"d-flex align-center")"
                      Style="@(Pokemon.PersonalInfo.IsDualGender ? string.Empty : "padding-left: 12px")">

                <GenderDisplayComponent Gender="@((Gender)Pokemon.Gender)"
                                        OnClick="@OnGenderToggle"
                                        Disabled="@(!Pokemon.PersonalInfo.IsDualGender)" />

                @if (!Pokemon.PersonalInfo.IsDualGender)
                {
                    <MudText>
                        - Gender cannot be changed for this Pokémon.
                    </MudText>
                }

            </MudStack>
        </div>
    }

    <MudNumericField Label="EXP"
                     Variant="@Variant.Outlined"
                     @bind-Value="@Pokemon.EXP"
                     @bind-Value:after="@(() => AppService.LoadPokemonStats(Pokemon))"
                     For="@(() => Pokemon.EXP)" />

    <MudNumericField Label="Level"
                     Variant="@Variant.Outlined"
                     @bind-Value="@Pokemon.CurrentLevel"
                     @bind-Value:after="@(() => AppService.LoadPokemonStats(Pokemon))"
                     For="@(() => Pokemon.CurrentLevel)" />

    @if (saveGeneration >= 3)
    {
        <MudSelect Label="Nature"
                   Variant="@Variant.Outlined"
                   @bind-Value:get="@Pokemon.Nature"
                   @bind-Value:set="@OnNatureSet"
                   For="@(() => Pokemon.Nature)">
            @foreach (var nature in GameInfo.FilteredSources.Natures.DistinctBy(nature => nature.Value))
            {
                <MudSelectItem Value="@((Nature)nature.Value)"
                               @key="@nature.Value">
                    <MudStack Row>
                        <MudText>
                            @nature.Text
                        </MudText>
                        <MudText>
                            @AppService.GetStatModifierString((Nature)nature.Value)
                        </MudText>
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (saveGeneration >= 8)
    {
        <MudSelect Label="Stat Nature"
                   Variant="@Variant.Outlined"
                   @bind-Value:get="@Pokemon.StatNature"
                   @bind-Value:set="@OnStatNatureSet"
                   For="@(() => Pokemon.StatNature)">
            @foreach (var nature in GameInfo.FilteredSources.Natures.DistinctBy(nature => nature.Value))
            {
                <MudSelectItem Value="@((Nature)nature.Value)"
                               @key="@nature.Value">
                    <MudStack Row>
                        <MudText>
                            @nature.Text
                        </MudText>
                        <MudText>
                            @AppService.GetStatModifierString((Nature)nature.Value)
                        </MudText>
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (Pokemon is IFormArgument && (Pokemon is { PersonalInfo.HasForms: true } || Pokemon is { Species: (ushort)Species.Unown }))
    {
        var forms = FormConverter.GetFormList(Pokemon.Species, GameInfo.Strings.types, GameInfo.Strings.forms, GameInfo.GenderSymbolUnicode, Pokemon.Context);
        if (forms.AsEnumerable().Any(f => !string.IsNullOrEmpty(f)))
        {
            <MudSelect T="@byte"
                       @ref="@FormSelect"
                       Label="Forme"
                       Variant="@Variant.Outlined"
                       @bind-Value="@Pokemon.Form"
                       @bind-Value:after="@AfterFormeChanged"
                       For="@(() => Pokemon.Form)">
                @for (byte i = 0; i < forms.Length; i++)
                {
                    var formId = i;
                    <MudSelectItem Value="@formId"
                                   @key="@formId">
                        @forms[formId]
                    </MudSelectItem>
                }
            </MudSelect>

            @if (Pokemon is IFormArgument && FormArgumentUtil.GetFormArgumentMax(Pokemon.Species, Pokemon.Form, Pokemon.Context) > 0 && FormConverter.GetFormArgumentIsNamedIndex(Pokemon.Species))
            {
                <MudSelect T="@(uint?)"
                           Label="Forme Arg"
                           Variant="@Variant.Outlined"
                           @bind-Value:get="@(Pokemon.GetFormArgument())"
                           @bind-Value:set="@(formArg => { Pokemon.ChangeFormArgument(formArg ?? 0); AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })">
                    @{
                        var formArgs = FormConverter.GetFormArgumentStrings(Pokemon.Species);
                    }
                    @for (uint? i = 0; i < formArgs.Length; i++)
                    {
                        var formArg = i;
                        <MudSelectItem Value="@formArg"
                                       @key="@formArg.Value">
                            @formArgs[formArg ?? 0]
                        </MudSelectItem>
                    }
                </MudSelect>
            }
        }
    }

    @if (saveGeneration >= 2 && saveFile.HeldItems.Length > 0)
    {
        <MudStack Row
                  Spacing="1"
                  AlignItems="@AlignItems.Center">

            <MudAutocomplete T="@ComboItem"
                             Label="Held Item"
                             Variant="@Variant.Outlined"
                             @bind-Value:get="@(AppService.GetItemComboItem(Pokemon.HeldItem))"
                             @bind-Value:set="@(item => { Pokemon.HeldItem = item.Value; AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                             SearchFunc="@SearchItemNames"
                             ToStringFunc="@(item => item?.Text)">
                <ItemTemplate Context="item">
                    <MudStack Row>
                        @if (item.Value != 0)
                        {
                            <MudImage Src="@SpriteHelper.GetArtworkItemSpriteFilename(item.Value)"
                                      Alt="@item.Text"
                                      title="@item.Text"
                                      ObjectFit="@ObjectFit.Contain"
                                      ObjectPosition="@ObjectPosition.Center"
                                      Width="22"
                                      Height="22" />
                        }
                        <MudText>
                            @item.Text
                        </MudText>
                    </MudStack>
                </ItemTemplate>
            </MudAutocomplete>

            @if (Pokemon.HeldItem != 0)
            {
                var itemText = AppService.GetItemComboItem(Pokemon.HeldItem).Text;
                <MudImage Src="@SpriteHelper.GetArtworkItemSpriteFilename(Pokemon.HeldItem)"
                          Alt="@itemText"
                          title="@itemText"
                          ObjectFit="@ObjectFit.Contain"
                          ObjectPosition="@ObjectPosition.Center"
                          Width="22"
                          Height="22" />
            }
        </MudStack>
    }

    @if (saveGeneration == 3)
    {
        <MudSelect Label="Ability"
                   Variant="@Variant.Outlined"
                   @bind-Value:get="@((int)Pokemon.Ability)"
                   @bind-Value:set="@(ability => Pokemon.SetAbility(ability))"
                   For="@(() => Pokemon.Ability)">
            @foreach (var ability in GameInfo.FilteredSources.GetAbilityList(Pokemon).DistinctBy(ability => ability.Value))
            {
                <MudSelectItem Value="@ability.Value"
                               @key="@ability.Value">
                    @ability.Text
                </MudSelectItem>
            }
        </MudSelect>
    }
    else if (saveGeneration >= 4)
    {
        <MudAutocomplete T="@ComboItem"
                         Label="Ability"
                         Variant="@Variant.Outlined"
                         @bind-Value:get="@(AppService.GetAbilityComboItem(Pokemon.Ability))"
                         @bind-Value:set="@(ability => Pokemon.Ability = ability.Value)"
                         SearchFunc="@SearchAbilityNames"
                         ToStringFunc="@(ability => ability?.Text)" />
    }

    @if (saveGeneration >= 4)
    {
        <MudSelect Label="Language"
                   Variant="@Variant.Outlined"
                   @bind-Value="@Pokemon.Language"
                   For="@(() => Pokemon.Language)">
            @foreach (var language in GameInfo.FilteredSources.Languages.DistinctBy(language => language.Value))
            {
                <MudSelectItem Value="@language.Value"
                               @key="@language.Value">
                    @language.Text
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (saveGeneration >= 2)
    {
        <MudNumericField Label="@(Pokemon.IsEgg ? "Hatch Counter" : "Friendship")"
                         Variant="@Variant.Outlined"
                         T="@byte"
                         Min="0"
                         Max="255"
                         @bind-Value="@Pokemon.CurrentFriendship"
                         For="@(() => Pokemon.CurrentFriendship)" />

        <MudStack Row
                  Wrap="@Wrap.Wrap">

            <MudCheckBox Label="Is Egg"
                         @bind-Value="@Pokemon.IsEgg"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsEgg)" />

            <MudCheckBox Label="Infected"
                         @bind-Value="@Pokemon.IsPokerusInfected"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsPokerusInfected)" />

            <MudCheckBox Label="Cured"
                         @bind-Value="@Pokemon.IsPokerusCured"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsPokerusCured)" />

            @if (Pokemon is PK5 pk5)
            {
                <MudCheckBox Label="N's Sparkle"
                             @bind-Value="@pk5.NSparkle"
                             @bind-Value:after="@RefreshService.Refresh"
                             For="@(() => pk5.NSparkle)" />
            }

            <MudCheckBox Label="Shiny"
                         @bind-Value:get="@Pokemon.IsShiny"
                         @bind-Value:set="@(isShiny => OnShinySet(isShiny))"
                         For="@(() => Pokemon.IsShiny)" />

        </MudStack>
    }
}
